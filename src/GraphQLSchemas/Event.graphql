type Event{
    id: String!
    name: String!
    dateTime: String!
    details: [String!]
    tasks: [EventTask!]
    createdAt: String!
    updatedAt: String!
}

type EventTask{
    id: String!
    member: Member!
    task: String!
    createdAt: String!
    updatedAt: String!
}

extend type Query{
    events(query: String, orderBy:OrderByOption, pagination: PaginationOptionInput): [Event!]!
    event(id: String!): Event
}

extend type Subscription{
    event: Event!
}

extend type Mutation{
    createEvent(data: CreateEventInput!): Event!
    updateEvent(id: String!, data: UpdateEventInput!): Event!
    deleteEvent(id: String!): Event!
}

input CreateEventInput{
    name: String!
    dateTime: String!
    details: [String!]
    tasks: [CreateTaskInput!]
}

input UpdateEventInput{
    name: String
    dateTime: String
    details: [String!]
    tasksToAdd: [CreateTaskInput!]
    tasksIdToRemove: [String!]
}

input CreateTaskInput{
    member: String!
    task: String!
}